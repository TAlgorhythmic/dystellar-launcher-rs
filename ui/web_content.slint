import { Content } from "typedef/type.slint";
import { CleanSpinner } from "clean_spinner.slint";

component NavButton inherits Rectangle {
    in-out property <image> img;
	in-out property <bool> hovered: area.has-hover;

	width: 82px;
	height: 100%;

	callback on_click;

    Rectangle {
		background: area.has-hover ? rgba(255, 255, 255, 0.2) : rgba(0, 0, 0, 0);
		border-width: 0px;
		clip: false;
		width: 100%;
		height: 100%;
		opacity: 1.0;

		area := TouchArea {
			clicked => { on_click(); }
		}

		animate background {
			duration: 200ms;
			easing: ease-in-out;
		}
		
		states [
		    press when area.pressed : {
				width: 95%;
				height: 95%;
				opacity: 0.6;
				in {
					animate width, height, opacity { duration: 80ms; easing: ease-in-out; }
				}
				out {
					animate width, height, opacity { duration: 250ms; easing: ease-in-out; }
				}
			}
		]

		Image {
			source: img;
			width: 100%;
			height: 100%;
			image-fit: contain;
		}
	}
}

export component WebContent inherits Rectangle {
    in-out property <[Content]> content: [];
	in-out property <int> actual: 0;

	background: rgba(0, 0, 0, 0.3);
	border-radius: 18px;
	clip: true;
	area := TouchArea {}
	GridLayout {
		prev := NavButton {
			visible: area.has-hover || self.hovered || next.hovered;
			col: 0;
			row: 0;
			img: @image-url("assets/icons/previous.png");
			on_click => {
				actual -= 1;
				if actual < 0 {
					actual = content.length - 1;
				}
			}
		}
		Rectangle {
			for item[index] in content : Rectangle {
				width: 100%;
				height: 100%;
				y: 0px;
				x: self.width * (actual - index);
				clip: true;
				Image {
					image-fit: cover;
				}

				animate x { duration: 180ms; easing: ease-in-out; }
			}
			if content.length == 0 : CleanSpinner { size: 64px; }
		}
		next := NavButton {
			visible: area.has-hover || self.hovered || prev.hovered;
			col: 2;
			row: 0;
			img: @image-url("assets/icons/next.png");
			on_click => {
				actual += 1;
				if actual >= content.length {
					actual = 0;
				}
			}
		}
	}
}
