import { HoverableText } from "hoverable_text.slint";
import { TasksGroup, TaskData, TaskState, TaskType } from "typedef/type.slint";
import { ProgressBar } from "progress_bar.slint";
import { ButtonRegular } from "button_regular.slint";

component Tooltip inherits Rectangle {
	in-out property <string> text: "";

	background: rgba(0, 0, 0, 0.8);
	border-color: white;
	border-radius: 12px;
	border-width: 1px;
	animate opacity {
		duration: 180ms;
		easing: ease-in-out;
	}

	HorizontalLayout {
		padding-top: 1px;
		padding-bottom: 1px;
		padding-left: 3px;
		padding-right: 3px;
		alignment: center;
		Text {
			text: root.text;
		}
	}
}

component TaskItem inherits HorizontalLayout {
	in-out property <TaskData> task;

	padding-left: 6px;
	alignment: space-between;
	area := TouchArea {}
	Text { text: task.name; }
	Tooltip {
		opacity: area.has-hover ? 1.0 : 0.0;
		text: task.details;
	}
	ProgressBar {
		width: 150px;
		height: 35px;
		color: task.state == TaskState.success ? #056800 : task.state == TaskState.failed ? #680000 : #006856;
		progress: task.progress;
	}
}

component Group inherits VerticalLayout {
	in-out property <TasksGroup> group;

	padding-left: 6px;
	spacing: 6px;
	Text {
		text: group.name;
	}
	for task in group.tasks: TaskItem {
		task: task;
	}
}

export component TaskManager inherits PopupWindow {
	in-out property <[TasksGroup]> tasks: [];
	in-out property <float> total_progress: 0.0;

	callback cancel();

	VerticalLayout {
		vertical-stretch: 1;
		horizontal-stretch: 1;
		padding: 10px;
		alignment: center;
		spacing: 6px;
		HorizontalLayout {
			spacing: 6px;
			Text { text: "Tasks"; }
			Rectangle { horizontal-stretch: 1; height: 1px; border-width: 1px; border-color: white; border-radius: 2px; }
			ProgressBar { progress: total_progress; }
		}
		Flickable {
			clip: true;
			viewport-height: parent.height * 0.8;
			viewport-width: parent.width;
			VerticalLayout {
				spacing: 6px;
				alignment: start;
				Text { text: "Downloads"; }
				for group in tasks: Group {
					visible: group.type == TaskType.download;
					group: group;
				}
				Text { text: "Sanity Checks"; }
				for group in tasks: Group {
					visible: group.type == TaskType.integrity-check;
					group: group;
				}
				Text { text: "Operation"; }
				for group in tasks: Group {
					visible: group.type == TaskType.operation;
					group: group;
				}
				Text { text: "Other"; }
				for group in tasks: Group {
					visible: group.type == TaskType.operation;
					group: group;
				}
			}
		}
		ButtonRegular {
			primary: false;
			initial-width: 150px;
			initial-height: 40px;
			on_click => { cancel(); }
			Text { text: "Cancel"; }
		}
	}
}
